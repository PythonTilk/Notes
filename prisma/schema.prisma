// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  password      String?   // For credentials auth
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  accounts          Account[]
  sessions          Session[]
  notes             Note[]
  activities        Activity[]
  ownedWorkspaces   Workspace[] @relation("WorkspaceOwner")
  workspaceMembers  WorkspaceMember[]
  chatMessages      ChatMessage[]
  files             File[]
  fileVersions      FileVersion[]
  announcements     Announcement[]
  auditLogs         AuditLog[]
  aiInsights        AIInsight[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  isPublic    Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  members   WorkspaceMember[]
  notes     Note[]
  activities Activity[]
  aiInsights AIInsight[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  type        NoteType @default(TEXT)
  color       String   @default("#fbbf24")
  tag         String?
  positionX   Float    @default(0)
  positionY   Float    @default(0)
  width       Float    @default(300)
  height      Float    @default(200)
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  // Connected notes relationships
  connectionsFrom NoteConnection[] @relation("FromNote")
  connectionsTo   NoteConnection[] @relation("ToNote")
  aiInsights      AIInsight[]

  @@map("notes")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  uploader    User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String
  versions    FileVersion[]

  @@map("files")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  type      MessageType @default(TEXT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@map("chat_messages")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  isPinned    Boolean  @default(true)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@map("announcements")
}

model SystemSettings {
  id                    String   @id @default(cuid())
  maintenanceMode       Boolean  @default(false)
  maintenanceMessage    String?
  backupSchedule        String   @default("0 2 * * *") // Daily at 2 AM
  lastBackup            DateTime?
  maxFileSize           Int      @default(10485760) // 10MB in bytes
  allowedFileTypes      String[] @default(["image/jpeg", "image/png", "image/gif", "application/pdf", "text/plain"])
  maxWorkspacesPerUser  Int      @default(10)
  maxNotesPerWorkspace  Int      @default(1000)
  chatRetentionDays     Int      @default(30)
  trashRetentionHours   Int      @default(24)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("audit_logs")
}

model Backup {
  id          String      @id @default(cuid())
  filename    String
  size        Int
  status      BackupStatus @default(PENDING)
  error       String?
  createdAt   DateTime    @default(now())
  completedAt DateTime?

  @@map("backups")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  metadata    Json?
  createdAt   DateTime     @default(now())

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace?    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model NoteConnection {
  id       String @id @default(cuid())
  fromId   String
  toId     String
  label    String?
  color    String @default("#6b7280")
  style    ConnectionStyle @default(SOLID)
  
  fromNote Note @relation("FromNote", fields: [fromId], references: [id], onDelete: Cascade)
  toNote   Note @relation("ToNote", fields: [toId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([fromId, toId])
  @@map("note_connections")
}

model FileVersion {
  id          String   @id @default(cuid())
  version     Int
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  checksum    String   // For detecting duplicate versions
  changelog   String?  // Optional description of changes
  createdAt   DateTime @default(now())

  // Relations
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String
  uploader    User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String

  @@unique([fileId, version])
  @@map("file_versions")
}

model AIInsight {
  id          String   @id @default(cuid())
  type        InsightType
  title       String
  content     String   @db.Text
  confidence  Float    @default(0.0) // 0.0 to 1.0
  metadata    Json?    // Additional data specific to insight type
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String?
  note        Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId      String?

  @@map("ai_insights")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum NoteType {
  TEXT
  RICH_TEXT
  CODE
  MARKDOWN
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ActivityType {
  NOTE_CREATED
  NOTE_UPDATED
  NOTE_DELETED
  NOTE_MOVED
  WORKSPACE_CREATED
  WORKSPACE_UPDATED
  WORKSPACE_DELETED
  WORKSPACE_JOINED
  WORKSPACE_LEFT
  FILE_UPLOADED
  FILE_DELETED
  CHAT_MESSAGE
  ANNOUNCEMENT_CREATED
  USER_ROLE_CHANGED
  SYSTEM_SETTINGS_UPDATED
  BACKUP_CREATED
  MAINTENANCE_MODE_TOGGLED
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ConnectionStyle {
  SOLID
  DASHED
  DOTTED
}

enum InsightType {
  SUMMARY
  SUGGESTION
  PATTERN
  DUPLICATE
  IMPROVEMENT
  RELATIONSHIP
}